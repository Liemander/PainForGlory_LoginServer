@using Microsoft.AspNetCore.Identity
@model List<PainForGlory_LoginServer.Models.UserAccount>
@inject UserManager<PainForGlory_LoginServer.Models.UserAccount> UserManager

@{
    int page = ViewBag.Page;
    int totalPages = ViewBag.TotalPages;
    int pageSize = ViewBag.PageSize;
    string search = ViewBag.Search as string ?? "";
    string roleFilter = ViewBag.RoleFilter as string ?? "";

    string BuildPageUrl(int p) => Url.Action("Index", new
    {
        area = "Admin",
        search,
        roleFilter,
        pageSize,
        page = p
    });

    int visiblePages = 5;
    int half = visiblePages / 2;
    int start = Math.Max(2, page - half);
    int end = Math.Min(totalPages - 1, page + half);

    if (end - start + 1 < visiblePages)
    {
        if (start == 2)
            end = Math.Min(totalPages - 1, end + (visiblePages - (end - start + 1)));
        else if (end == totalPages - 1)
            start = Math.Max(2, start - (visiblePages - (end - start + 1)));
    }
}

<h1 class="mb-4">User Management</h1>
<form method="get" class="row g-3 mb-4">
    <div class="col-md-4">
        <input type="text" name="search" value="@ViewBag.Search" class="form-control" placeholder="Search by username or email" />
    </div>
    <div class="col-md-3">
        <select name="roleFilter" class="form-select">
            <option value="">All Roles</option>
            <option value="Admin" selected="@(ViewBag.RoleFilter == "Admin")">Admin</option>
            <option value="SuperAdmin" selected="@(ViewBag.RoleFilter == "SuperAdmin")">SuperAdmin</option>
        </select>
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary">Apply</button>
    </div>
</form>

<table class="table table-bordered table-hover align-middle">
    <thead class="table-light">
        <tr>
            <th>Email</th>
            <th>Username</th>
            <th>Roles</th>
            <th>Banned?</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Model)
        {
            var roles = await UserManager.GetRolesAsync(user);
            bool isAdmin = roles.Contains("Admin");
            bool isSuperAdmin = roles.Contains("SuperAdmin");
            bool isBanned = user.LockoutEnd.HasValue && user.LockoutEnd.Value > DateTimeOffset.UtcNow;

            <tr>
                <td>@user.Email</td>
                <td>@user.UserName</td>
                <td>@string.Join(", ", roles)</td>
                <td>@(isBanned ? "Yes" : "No")</td>
                <td>
                    <div class="d-flex flex-wrap gap-2">
                        @if (!isSuperAdmin)
                        {
                            <form asp-area="Admin" asp-controller="UserManagement" asp-action="@(isAdmin ? "DemoteAdmin" : "PromoteToAdmin")" method="post" class="d-inline">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="id" value="@user.Id" />
                                <input type="hidden" name="search" value="@ViewBag.Search" />
                                <input type="hidden" name="roleFilter" value="@ViewBag.RoleFilter" />
                                <input type="hidden" name="page" value="@ViewBag.Page" />
                                <input type="hidden" name="pageSize" value="@ViewBag.PageSize" />

                                <button type="submit" class="btn btn-sm @(isAdmin ? "btn-warning" : "btn-success")">
                                    @(isAdmin ? "Demote" : "Promote")
                                </button>
                            </form>
                        }

                        <form asp-area="Admin" asp-controller="UserManagement" asp-action="@(isBanned ? "UnbanUser" : "BanUser")" method="post" class="d-inline">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@user.Id" />
                            <input type="hidden" name="search" value="@ViewBag.Search" />
                            <input type="hidden" name="roleFilter" value="@ViewBag.RoleFilter" />
                            <input type="hidden" name="page" value="@ViewBag.Page" />
                            <input type="hidden" name="pageSize" value="@ViewBag.PageSize" />
                            <button type="submit" class="btn btn-sm @(isBanned ? "btn-secondary" : "btn-danger")">
                                @(isBanned ? "Unban" : "Ban")
                            </button>
                        </form>

                        <form asp-area="Admin" asp-controller="UserManagement" asp-action="ResetPassword" method="post" class="d-inline" onsubmit="return confirm('Reset password to TempPassword123!?')">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="id" value="@user.Id" />
                            <input type="hidden" name="search" value="@ViewBag.Search" />
                            <input type="hidden" name="roleFilter" value="@ViewBag.RoleFilter" />
                            <input type="hidden" name="page" value="@ViewBag.Page" />
                            <input type="hidden" name="pageSize" value="@ViewBag.PageSize" />
                            <button type="submit" class="btn btn-sm btn-outline-dark">Reset PW</button>
                        </form>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
<nav aria-label="User pagination" class="mt-4 d-flex flex-wrap align-items-center justify-content-between">
    <div class="d-flex align-items-center gap-2">
        <label class="mb-0">Jump to page:</label>
        <input type="number" id="jumpPage" class="form-control form-control-sm" style="width: 70px;" min="1" max="@totalPages" value="@(page)" />
        <button class="btn btn-sm btn-outline-primary" onclick="jumpToPage()">Go</button>
    </div>
    <ul class="pagination mb-0">
        @if (page > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@BuildPageUrl(page - 1)">Previous</a>
            </li>
        }

        <li class="page-item @(page == 1 ? "active" : "")">
            <a class="page-link" href="@BuildPageUrl(1)">1</a>
        </li>

        @if (start > 2)
        {
            <li class="page-item disabled"><span class="page-link">...</span></li>
        }

        @for (int i = start; i <= end; i++)
        {
            <li class="page-item @(i == page ? "active" : "")">
                <a class="page-link" href="@BuildPageUrl(i)">@i</a>
            </li>
        }

        @if (end < totalPages - 1)
        {
            <li class="page-item disabled"><span class="page-link">...</span></li>
        }

        @if (totalPages > 1)
        {
            <li class="page-item @(page == totalPages ? "active" : "")">
                <a class="page-link" href="@BuildPageUrl(totalPages)">@totalPages</a>
            </li>
        }

        @if (page < totalPages)
        {
            <li class="page-item">
                <a class="page-link" href="@BuildPageUrl(page + 1)">Next</a>
            </li>
        }
    </ul>


    <div class="d-flex align-items-center gap-3">
        <label class="mb-0">Show:</label>
        <select name="pageSize" class="form-select form-select-sm" style="width: auto;" onchange="onPageSizeChange(this)">
            @{
                var sizes = new[] { 2, 10, 20, 50, 100 };
                foreach (var size in sizes)
                {
                    <option value="@size" selected="@(ViewBag.PageSize == size)">@size per page</option>
                }
            }
        </select>
    </div>
</nav>

<script>
    function jumpToPage() {
        const page = parseInt(document.getElementById("jumpPage").value);
        if (!isNaN(page)) {
            const params = new URLSearchParams(window.location.search);
            params.set("page", page);
            window.location.search = params.toString();
        }
    }

    function onPageSizeChange(select) {
        const form = document.createElement("form");
        form.method = "get";
        form.action = window.location.pathname;

        const params = new URLSearchParams(window.location.search);
        const previousPageSize = parseInt('@ViewBag.PageSize' ?? "10");
        const currentPage = parseInt(params.get("page") || "1");
        const newPageSize = parseInt(select.value);
        const newPage = Math.floor((currentPage - 1) * previousPageSize / newPageSize) + 1;

        params.set("page", newPage);
        params.set("pageSize", newPageSize);

        for (const [key, val] of params.entries()) {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = key;
            input.value = val;
            form.appendChild(input);
        }

        document.body.appendChild(form);
        form.submit();
    }
</script>